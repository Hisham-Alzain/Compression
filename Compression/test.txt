namespace Compression
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;

    public class ShannonFanoCompressor
    {
        public class Symbol
        {
            public byte character { get; set; }
            public int frequency { get; set; }
            public string code { get; set; }
        }

        public static void Compress(string inputFile, string outputFile)
        {
            byte[] data = File.ReadAllBytes(inputFile);
            Dictionary<byte, int> frequencies = CalculateFrequencies(data);
            List<Symbol> symbols = CreateSymbol(frequencies);

            BuildShannonFanoTree(symbols, 0, symbols.Count - 1);

            //important
            Dictionary<byte, string> codeTable = symbols.ToDictionary(n => n.character, n => n.code);

            string encodedBits = string.Join("", data.Select(b => codeTable[b]));

            // Pad the bits to make them divisible by 8
            int padding = (8 - (encodedBits.Length % 8)) % 8;
            encodedBits += new string('0', padding);

            // Convert bits to bytes
            byte[] compressedData = new byte[encodedBits.Length / 8];
            for (int i = 0; i < compressedData.Length; i++)
            {
                string byteStr = encodedBits.Substring(i * 8, 8);
                compressedData[i] = Convert.ToByte(byteStr, 2);
            }

            // Write metadata(header) and compressed data
            using (FileStream fs = new FileStream(outputFile, FileMode.Create))
            using (BinaryWriter writer = new BinaryWriter(fs))
            {
                // Write padding info
                writer.Write((byte)padding);

                // Write symbol count
                writer.Write((ushort)symbols.Count);

                // Write symbol-frequency pairs
                foreach (var node in symbols)
                {
                    writer.Write(node.character);
                    writer.Write((ushort)node.frequency);
                }

                // Write compressed data
                writer.Write(compressedData);
            }
        }

        public static void Decompress(string inputFile, string outputFile)
        {
            using (FileStream fs = new FileStream(inputFile, FileMode.Open))
            using (BinaryReader reader = new BinaryReader(fs))
            {
                // Read padding
                byte padding = reader.ReadByte();

                // Read symbol count
                ushort symbolCount = reader.ReadUInt16();

                // Read symbol-frequency pairs
                Dictionary<byte, int> frequencies = new Dictionary<byte, int>();
                for (int i = 0; i < symbolCount; i++)
                {
                    byte symbol = reader.ReadByte();
                    ushort frequency = reader.ReadUInt16();
                    frequencies[symbol] = frequency;
                }

                // Read compressed data
                byte[] compressedData = reader.ReadBytes((int)(fs.Length - fs.Position));

                // Convert bytes to bits
                string encodedBits = string.Join("", compressedData.Select(b => Convert.ToString(b, 2).PadLeft(8, '0')));

                // Remove padding
                if (padding > 0)
                {
                    encodedBits = encodedBits.Substring(0, encodedBits.Length - padding);
                }

                // Rebuild Shannon-Fano tree
                List<Symbol> nodes = CreateSymbol(frequencies);
                BuildShannonFanoTree(nodes, 0, nodes.Count - 1);
                Dictionary<string, byte> reverseCodeTable = nodes.ToDictionary(n => n.code, n => n.character);

                // Decode bits
                List<byte> outputData = new List<byte>();
                string currentCode = "";

                foreach (char bit in encodedBits)
                {
                    currentCode += bit;
                    if (reverseCodeTable.ContainsKey(currentCode))
                    {
                        outputData.Add(reverseCodeTable[currentCode]);
                        currentCode = "";
                    }
                }

                File.WriteAllBytes(outputFile, outputData.ToArray());
            }
        }

        private static Dictionary<byte, int> CalculateFrequencies(byte[] data)
        {
            Dictionary<byte, int> frequencies = new Dictionary<byte, int>();
            foreach (byte b in data)
            {
                if (frequencies.ContainsKey(b))
                    frequencies[b]++;
                else
                    frequencies[b] = 1;
            }
            return frequencies;
        }

        private static List<Symbol> CreateSymbol(Dictionary<byte, int> frequencies)
        {
            //kvp:key value pair
            return frequencies.Select(kvp => new Symbol
            {
                character = kvp.Key,
                frequency = kvp.Value,
                code = ""
            })
            .OrderByDescending(n => n.frequency)
            .ToList();
        }

        private static void BuildShannonFanoTree(List<Symbol> nodes, int start, int end)
        {
            if (start >= end)
                return;

            //takes total from start to end to calculate all the current subset
            int total = nodes.Skip(start).Take(end - start + 1).Sum(n => n.frequency);
            int sum = 0;
            int split = start;

            // Find the best split point
            for (int i = start; i <= end; i++)
            {
                sum += nodes[i].frequency;
                if (sum * 2 >= total)
                {
                    split = i;
                    break;
                }
            }

            // Assign codes
            for (int i = start; i <= end; i++)
            {
                nodes[i].code += (i <= split) ? "1" : "0";
            }

            // Recursively process both parts
            BuildShannonFanoTree(nodes, start, split);
            BuildShannonFanoTree(nodes, split + 1, end);
        }
    }

    // Example usage:
    // ShannonFanoCompressor.Compress("input.txt", "compressed.sf");
    // ShannonFanoCompressor.Decompress("compressed.sf", "output.txt");
    internal static class Program
    {
        /// <summary>
        ///  The main entry point for the application.
        /// </summary>
        [STAThread]
        static void Main()
        {
            //// To customize application configuration such as set high DPI settings or default font,
            //// see https://aka.ms/applicationconfiguration.
            //ApplicationConfiguration.Initialize();
            //Application.Run(new Form1());
            //ShannonFanoCompressor.Compress("D:\\projects\\C#\\Compression\\Compression\\test1.wav", "D:\\projects\\C#\\Compression\\Compression\\compressed4.sf");
            ShannonFanoCompressor.Decompress("D:\\projects\\C#\\Compression\\Compression\\compressed4.sf", "D:\\projects\\C#\\Compression\\Compression\\uncompressed.wav");
        }
    }
}

